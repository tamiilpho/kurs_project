from aiogram import Router, types, F
import datetime
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import markdown
from DB import database

from Classes.order import Order
from DB.database import save_order_to_db

router = Router(name=__name__)


@router.callback_query(F.data.startswith("product_id:"))
async def view_details_product_callback(query: types.CallbackQuery):
    product_id = query.data.split(":")[1]
    user_id = query.from_user.id
    user_role = database.get_user(user_id)["role"]

    product = database.get_product_by_id(product_id)

    if product:
        gender = (
            " –Ω—å–æ–≥–æ üë®‚Äçü¶±" if product['sex'] == "male"
            else " –Ω–µ—ó üë©" if product['sex'] == "female"
            else " –Ω—å–æ–≥–æ —Ç–∞ –Ω–µ—ó üë®‚Äçü¶±üë©"
        )
        product_info = (
            f"üõçÔ∏è {markdown.hbold('–¢–æ–≤–∞—Ä:')} {product['name']}\n"
            f"{markdown.hbold('–î–ª—è:')} {gender}\n"
            f"üè∑Ô∏è {markdown.hbold('–ë—Ä–µ–Ω–¥:')} {product['brand']}\n"
            f"üå∏ {markdown.hbold('–°–µ–∑–æ–Ω:')} {product['season']}\n"
            f"üíµ {markdown.hbold('–¶—ñ–Ω–∞:')} {product['price']} –≥—Ä–Ω\n"
            f"üí∞ {markdown.hbold('–ó–Ω–∏–∂–∫–∞:')} {'—Ç–∞–∫' if product['discount_price'] else '–Ω—ñ'}\n"
            f"üåà {markdown.hbold('–ö–æ–ª—å–æ—Ä–∏:')} {product['colors']}\n"
            f"üìè {markdown.hbold('–†–æ–∑–º—ñ—Ä–∏:')} {product['sizes']}\n"
        )
        try:
            photo_path = product['image_path']
            photo_send = FSInputFile(photo_path)

            if user_role == "admin":
                markup = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é",
                        callback_data=f"remove_product_by_article:{product['article']}"
                    ),
                    InlineKeyboardButton(
                        text="–î–æ–¥–∞—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω–µ",
                        callback_data=f"add_to_favorite:{product['article']}"
                    ),
                    InlineKeyboardButton(
                        text="–ó–∞–º–æ–≤–∏—Ç–∏",
                        callback_data=f"make_order_by_id:{product['id']}"
                    ),
                ]])
            else:
                markup = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="–ó–∞–º–æ–≤–∏—Ç–∏",
                        callback_data=f"make_order_by_id:{product['id']}"
                    ),
                    InlineKeyboardButton(
                        text="–î–æ–¥–∞—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω–µ",
                        callback_data=f"add_to_favorite:{product['article']}"
                    )
                ]])
            await query.message.answer_photo(photo_send, caption=product_info, reply_markup=markup)
        except Exception as e:
            await query.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É.")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
    else:
        await query.message.answer("–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –∑ —Ç–∞–∫–∏–º ID.")
    await query.answer()


@router.callback_query(F.data.startswith("remove_product_by_article:"))
async def remove_product_by_article_callback(query: types.CallbackQuery):
    product_article = query.data.split(":")[1]

    success = database.remove_product_by_article(product_article)

    if success:
        await query.answer("–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        await query.message.edit_text("–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π.")
    else:
        await query.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


@router.callback_query(F.data.startswith("add_to_favorite:"))
async def add_to_favorite_callback(query: types.CallbackQuery):
    product_article = query.data.split(":")[1]
    user_id = query.from_user.id

    try:
        database.add_to_favorites(user_id, product_article)
        await query.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —É–ª—é–±–ª–µ–Ω–µ!", show_alert=True)
    except Exception as e:
        await query.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")


@router.callback_query(F.data.startswith("make_order_by_id:"))
async def make_order_callback(query: types.CallbackQuery):
    product_id = query.data.split(":")[1]

    product = database.get_product_by_id(product_id)

    if product:
        customer_nickname = query.from_user.username or "–ê–Ω–æ–Ω—ñ–º"

        order = Order(
            order_id=None,
            customer_nickname=customer_nickname,
            product_name=product['name'],
            product_article=product['article'],
            order_time=datetime.datetime.now().strftime('%Y-%m-%d %H:%M'),
            amount_due=product['price']
        )

        save_order_to_db(order)

        await query.answer(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä '{order.product_name}' –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–µ!"
                           f" –ë—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ. –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–ø–∏—à–µ –í–∞–º —É Telegram")
    else:
        await query.answer("–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –∑ —Ç–∞–∫–∏–º ID.")


@router.callback_query(F.data.startswith("order_processed:"))
async def process_order_callback(query: types.CallbackQuery):
    order_id = query.data.split(":")[1]

    success = database.mark_order_as_processed(order_id)

    if success:
        await query.answer(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID {order_id} –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ.")
    else:
        await query.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
