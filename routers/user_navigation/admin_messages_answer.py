from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import markdown

from DB import database

router = Router(name=__name__)


class ProductStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_sex = State()
    waiting_for_brand = State()
    waiting_for_season = State()
    waiting_for_price = State()
    waiting_for_discount_price = State()
    waiting_for_colors = State()
    waiting_for_sizes = State()
    waiting_for_image = State()
    waiting_for_article = State()


@router.message(F.text == 'üìã –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è')
async def show_orders_command(message: types.Message):
    user_id = message.from_user.id
    user = database.get_user(user_id)

    if user["role"] != "admin":
        await message.bot.send_message(
            chat_id=message.chat.id,
            text="–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.",
        )
        return

    orders = database.get_all_orders()

    if not orders:
        await message.bot.send_message(
            chat_id=message.chat.id,
            text="–ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.",
        )
        return

    for order in orders:
        response_text = (
            f"üÜî ID: {order['order_id']}\n"
            f"üë§ –ù—ñ–∫–Ω–µ–π–º: @{order['customer_nickname']}\n"
            f"üõçÔ∏è –¢–æ–≤–∞—Ä: {order['product_name']}\n"
            f"üÜî –ê—Ä—Ç–∏–∫—É–ª: {order['product_article']}\n"
            f"üïí –ß–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order['timestamp']}\n"
            f"üíµ –°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {order['amount_due']} –≥—Ä–Ω\n"
            f"-----------------\n"
        )

        markup = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="–û–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ",
                callback_data=f"order_processed:{order['order_id']}"
            )
        ]])

        await message.bot.send_message(
            chat_id=message.chat.id,
            text=response_text,
            reply_markup=markup
        )


@router.message(F.text == 'üõí –¢–æ–≤–∞—Ä–∏ –º–∞–≥–∞–∑–∏–Ω—É')
async def products_command(message: types.Message):
    user_id = message.from_user.id
    user = database.get_user(user_id)
    if not (user["role"] == "admin"):
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=f"–ó—Ä–æ–±—ñ—Ç—å –≤–∏–±—ñ—Ä",
        )
        return
    btn1 = types.KeyboardButton(text="üõí –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
    markup = types.ReplyKeyboardMarkup(keyboard=[[btn1]], resize_keyboard=True)
    await message.bot.send_message(
        chat_id=message.chat.id,
        text=f"–í–≤–µ–¥—ñ—Ç—å –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—É –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä",
        reply_markup=markup,
    )


@router.message(F.text == 'üõí –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä')
async def add_product_command(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä—É:")
    await state.set_state(ProductStates.waiting_for_article)


@router.message(ProductStates.waiting_for_article)
async def process_product_article(message: types.Message, state: FSMContext):
    await state.update_data(article=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")
    await state.set_state(ProductStates.waiting_for_name)


@router.message(ProductStates.waiting_for_name)
async def process_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    btn1 = types.KeyboardButton(text="–î–ª—è –Ω—å–æ–≥–æ")
    btn2 = types.KeyboardButton(text="–î–ª—è –Ω–µ—ó")
    btn3 = types.KeyboardButton(text="–£–Ω—ñ—Å–µ–∫—Å")
    markup = types.ReplyKeyboardMarkup(keyboard=[[btn1, btn3, btn2]], resize_keyboard=True)
    await message.bot.send_message(
        chat_id=message.chat.id,
        text=f"–î–ª—è –∫–æ–≥–æ —Ü–µ–π –æ–¥—è–≥",
        reply_markup=markup,
    )
    await state.set_state(ProductStates.waiting_for_sex)


@router.message(ProductStates.waiting_for_sex)
async def process_product_sex(message: types.Message, state: FSMContext):
    if message.text == "–î–ª—è –Ω—å–æ–≥–æ":
        await state.update_data(sex="male")
    elif message.text == "–î–ª—è –Ω–µ—ó":
        await state.update_data(sex="female")
    else:
        await state.update_data(sex="unisex")
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –±—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä—É:")
    await state.set_state(ProductStates.waiting_for_brand)


@router.message(ProductStates.waiting_for_brand)
async def process_product_brand(message: types.Message, state: FSMContext):
    await state.update_data(brand=message.text)
    await message.answer("–Ø–∫–∏–π —Å–µ–∑–æ–Ω? (–ª—ñ—Ç–æ, –≤–µ—Å–Ω–∞/–æ—Å—ñ–Ω—å, –∑–∏–º–∞):")
    await state.set_state(ProductStates.waiting_for_season)


@router.message(ProductStates.waiting_for_season)
async def process_product_season(message: types.Message, state: FSMContext):
    await state.update_data(season=message.text)
    await message.answer("–í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É:")
    await state.set_state(ProductStates.waiting_for_price)


@router.message(ProductStates.waiting_for_price)
async def process_product_price(message: types.Message, state: FSMContext):
    await state.update_data(price=message.text)
    await message.answer("–ß–∏ —Ü–µ –∑–Ω–∏–∂–µ–Ω–∞ —Ü—ñ–Ω–∞? (—Ç–∞–∫/–Ω—ñ):")
    await state.set_state(ProductStates.waiting_for_discount_price)


@router.message(ProductStates.waiting_for_discount_price)
async def process_product_discount(message: types.Message, state: FSMContext):
    discount_response = message.text.lower()
    if discount_response == '—Ç–∞–∫':
        await state.update_data(discount_price=True)
    else:
        await state.update_data(discount_price=False)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É:")
    await state.set_state(ProductStates.waiting_for_colors)


@router.message(ProductStates.waiting_for_colors)
async def process_product_colors(message: types.Message, state: FSMContext):
    await state.update_data(colors=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É:")
    await state.set_state(ProductStates.waiting_for_sizes)


@router.message(ProductStates.waiting_for_sizes)
async def process_product_sizes(message: types.Message, state: FSMContext):
    await state.update_data(sizes=message.text)
    await message.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ:")
    await state.set_state(ProductStates.waiting_for_image)


@router.message(ProductStates.waiting_for_image)
async def process_product_image(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É.")
        return
    file_id = message.photo[-1].file_id
    file_path = await message.bot.get_file(file_id)  # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    await message.bot.download_file(file_path.file_path, f'res/{file_path.file_path.split("/")[-1]}')
    image_path = f'res/{file_path.file_path.split("/")[-1]}'

    await state.update_data(image_path=image_path)
    data = await state.get_data()

    database.add_product(
        name=data['name'],
        sex=data['sex'],
        brand=data['brand'],
        season=data['season'],
        price=data['price'],
        discount_price=data['discount_price'],
        article=data['article'],
        colors=data['colors'],
        sizes=data['sizes'],
        image_path=data['image_path']
    )

    await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
    await state.clear()


@router.message(F.text)
async def search_product_command(message: types.Message, state: FSMContext):
    article = message.text.strip()

    product = database.get_product_by_article(article)

    print("Product data:", product)

    if product:
        gender = "–Ω–µ–≤—ñ–¥–æ–º–∏–π"
        if product.get('sex') == "male":
            gender = " –Ω—å–æ–≥–æ üë®‚Äçü¶±"
        elif product.get('sex') == "female":
            gender = " –Ω–µ—ó üë©"
        else:
            gender = " –Ω—å–æ–≥–æ —Ç–∞ –Ω–µ—ó üë®‚Äçü¶±üë©"

        product_info = (
            f"üõçÔ∏è {markdown.hbold('–¢–æ–≤–∞—Ä:')} {product.get('name', '–Ω–µ–≤—ñ–¥–æ–º–∏–π')}\n"
            f"{markdown.hbold('–î–ª—è:')} {gender}\n"
            f"üè∑Ô∏è {markdown.hbold('–ë—Ä–µ–Ω–¥:')} {product.get('brand', '–Ω–µ–≤—ñ–¥–æ–º–∏–π')}\n"
            f"üå∏ {markdown.hbold('–°–µ–∑–æ–Ω:')} {product.get('season', '–Ω–µ–≤—ñ–¥–æ–º–∏–π')}\n"
            f"üíµ {markdown.hbold('–¶—ñ–Ω–∞:')} {product.get('price', '–Ω–µ–≤—ñ–¥–æ–º–∏–π')} –≥—Ä–Ω\n"
            f"üí∞ {markdown.hbold('–ó–Ω–∏–∂–∫–∞:')} {'—Ç–∞–∫' if product.get('discount_price') else '–Ω—ñ'}\n"
            f"üåà {markdown.hbold('–ö–æ–ª—å–æ—Ä–∏:')} {product.get('colors', '–Ω–µ–≤—ñ–¥–æ–º—ñ')}\n"
            f"üìè {markdown.hbold('–†–æ–∑–º—ñ—Ä–∏:')} {product.get('sizes', '–Ω–µ–≤—ñ–¥–æ–º—ñ')}\n"
            f"{markdown.hbold('–ê—Ä—Ç–∏–∫—É–ª:')} {product.get('article', '–Ω–µ–≤—ñ–¥–æ–º–∏–π')}\n"
        )

        try:
            if product.get('image_path'):
                photo_path = product['image_path']
                photo_send = FSInputFile(photo_path)
                print("Photo path:", photo_path)

                user_id = message.from_user.id
                user_role = database.get_user(user_id)["role"]

                if user_role == "admin":
                    inline_kb = InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(
                            text="–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é",
                            callback_data=f"remove_product_by_article:{product['article']}"
                        ),
                        InlineKeyboardButton(
                            text="–î–æ–¥–∞—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω–µ",
                            callback_data=f"add_to_favorite:{product['article']}"
                        ),
                        InlineKeyboardButton(
                            text="–ó–∞–º–æ–≤–∏—Ç–∏",
                            callback_data=f"make_order_by_id:{product['id']}"
                        ),
                    ]])
                else:
                    inline_kb = InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(
                            text="–ó–∞–º–æ–≤–∏—Ç–∏",
                            callback_data=f"make_order_by_id:{product['id']}"
                        ),
                        InlineKeyboardButton(
                            text="–î–æ–¥–∞—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω–µ",
                            callback_data=f"add_to_favorite:{product['article']}"
                        )
                    ]])

                await message.answer_photo(photo_send, caption=product_info, reply_markup=inline_kb)
            else:
                await message.answer(product_info)

        except Exception as e:
            await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É.")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
    else:
        await message.answer("–¢–æ–≤–∞—Ä –∑ —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
