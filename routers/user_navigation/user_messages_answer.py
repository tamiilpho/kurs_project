from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from DB import database

router = Router(name=__name__)


class ProductSearchStates(StatesGroup):
    waiting_for_gender = State()
    waiting_for_brand = State()
    waiting_for_size = State()


@router.message(F.text == '‚ù§Ô∏è –£–ª—é–±–ª–µ–Ω–µ')
async def view_favorites(message: types.Message):
    user_id = message.from_user.id

    favorites_articles = database.get_user_favorites(user_id)

    if favorites_articles:
        response_text = "–¢–≤–æ—ó —É–ª—é–±–ª–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏:\n\n"
        kb_builder = InlineKeyboardBuilder()

        products = []
        for article in favorites_articles:
            product = database.get_product_by_article(article.strip())
            if product:
                products.append(product)

        for idx, product in enumerate(products, start=1):
            response_text += (
                f"{idx}. {product['name']}\n"
                f"–†–æ–∑–º—ñ—Ä–∏: {product['sizes']}\n\n"
            )
            kb_builder.add(
                types.InlineKeyboardButton(
                    text=str(idx),
                    callback_data=f"product_id:{product['id']}"
                )
            )

        await message.answer(response_text, reply_markup=kb_builder.as_markup())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.")


@router.message((F.text == 'üë®‚Äçü¶± –î–ª—è –Ω—å–æ–≥–æ') | (F.text == 'üë© –î–ª—è –Ω–µ—ó'))
async def start_product_search(message: types.Message, state: FSMContext):
    gender = "male" if message.text == "üë®‚Äçü¶± –î–ª—è –Ω—å–æ–≥–æ" else "female"
    await state.update_data(gender=gender)

    await message.answer("–í–∫–∞–∂—ñ—Ç—å –±—Ä–µ–Ω–¥, —è–∫–∏–π –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:")
    await state.set_state(ProductSearchStates.waiting_for_brand)


@router.message(ProductSearchStates.waiting_for_brand)
async def process_brand(message: types.Message, state: FSMContext):
    brand = message.text.lower()
    await state.update_data(brand=brand)

    await message.answer("–Ø–∫–∏–π —Ä–æ–∑–º—ñ—Ä –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω? –í–∫–∞–∂—ñ—Ç—å –æ–¥–∏–Ω –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É:")
    await state.set_state(ProductSearchStates.waiting_for_size)


@router.message(ProductSearchStates.waiting_for_size)
async def process_size(message: types.Message, state: FSMContext):
    sizes = message.text.lower().split(",")
    await state.update_data(sizes=sizes)
    data = await state.get_data()

    products = database.search_products_for_user(
        sex=data['gender'],
        brand=data['brand'],
        size=','.join(data['sizes']).lower()
    )

    if products:
        response_text = "–û—Å—å —Ç–æ–≤–∞—Ä–∏, —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ –≤–∞—à—ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó:\n\n"
        kb_builder = InlineKeyboardBuilder()

        for idx, product in enumerate(products, start=1):
            response_text += (
                f"{idx}. {product['name']}\n"
                f"–†–æ–∑–º—ñ—Ä–∏: {product['sizes']}\n\n"
            )
            kb_builder.add(
                types.InlineKeyboardButton(
                    text=str(idx),
                    callback_data=f"product_id:{product['id']}"
                )
            )

        await message.answer(response_text, reply_markup=kb_builder.as_markup())
    else:
        await message.answer("–ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä—ñ—è–º.")

    await state.clear()
